"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.install = install;
exports.run = run;
var adm_zip_1 = __importDefault(require("adm-zip"));
var axios_1 = __importDefault(require("axios"));
var child_process = __importStar(require("child_process"));
var fs = __importStar(require("fs"));
var path = __importStar(require("path"));
var tar = __importStar(require("tar"));
var util_1 = require("util");
var SEMVER_REGEX = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;
var EXECUTABLE = "defang";
var URL_LATEST_RELEASE = "https://api.github.com/repos/DefangLabs/defang/releases/latest";
var HTTP_STATUS_OK = 200;
var exec = (0, util_1.promisify)(child_process.exec);
function getLatestVersion() {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        var _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4, axios_1.default.get(URL_LATEST_RELEASE)];
                case 1:
                    response = _c.sent();
                    if ((response === null || response === void 0 ? void 0 : response.status) !== HTTP_STATUS_OK) {
                        throw new Error("Failed to get latest version from GitHub. Status code: ".concat(response.status));
                    }
                    return [2, (_b = (_a = response.data) === null || _a === void 0 ? void 0 : _a.tag_name) === null || _b === void 0 ? void 0 : _b.replace("v", "").trim()];
            }
        });
    });
}
function downloadAppArchive(archiveFilename, outputPath) {
    return __awaiter(this, void 0, void 0, function () {
        var downloadUrl, downloadTargetFile;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    downloadUrl = "https://s.defang.io/".concat(archiveFilename, "?x-defang-source=npm");
                    downloadTargetFile = path.join(outputPath, archiveFilename);
                    return [4, downloadFile(downloadUrl, downloadTargetFile)];
                case 1: return [2, _a.sent()];
            }
        });
    });
}
function downloadFile(downloadUrl, downloadTargetFile) {
    return __awaiter(this, void 0, void 0, function () {
        var response, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 5]);
                    return [4, axios_1.default.get(downloadUrl, {
                            responseType: "arraybuffer",
                            headers: {
                                "Content-Type": "application/octet-stream",
                            },
                        })];
                case 1:
                    response = _a.sent();
                    if ((response === null || response === void 0 ? void 0 : response.data) === undefined) {
                        throw new Error("Failed to download ".concat(downloadUrl, ". No data in response."));
                    }
                    return [4, fs.promises.writeFile(downloadTargetFile, response.data)];
                case 2:
                    _a.sent();
                    return [2, downloadTargetFile];
                case 3:
                    error_1 = _a.sent();
                    console.error(error_1);
                    return [4, fs.promises.unlink(downloadTargetFile)];
                case 4:
                    _a.sent();
                    return [2, null];
                case 5: return [2];
            }
        });
    });
}
function extractArchive(archiveFilePath, outputPath) {
    return __awaiter(this, void 0, void 0, function () {
        var result, ext, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    result = false;
                    ext = path.extname(archiveFilePath).toLocaleLowerCase();
                    _a = ext;
                    switch (_a) {
                        case ".zip": return [3, 1];
                        case ".gz": return [3, 3];
                    }
                    return [3, 4];
                case 1: return [4, extractZip(archiveFilePath, outputPath)];
                case 2:
                    result = _b.sent();
                    return [3, 5];
                case 3:
                    result = extractTarGz(archiveFilePath, outputPath);
                    return [3, 5];
                case 4: return [2, false];
                case 5: return [2, result];
            }
        });
    });
}
function extractZip(zipPath, outputPath) {
    return __awaiter(this, void 0, void 0, function () {
        var zip, result, error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    zip = new adm_zip_1.default(zipPath);
                    result = zip.extractEntryTo(EXECUTABLE, outputPath, true, true);
                    return [4, fs.promises.chmod(path.join(outputPath, EXECUTABLE), 755)];
                case 1:
                    _a.sent();
                    return [2, result];
                case 2:
                    error_2 = _a.sent();
                    console.error("An error occurred during zip extraction: ".concat(error_2));
                    return [2, false];
                case 3: return [2];
            }
        });
    });
}
function extractTarGz(tarGzFilePath, outputPath) {
    try {
        tar.extract({
            cwd: outputPath,
            file: tarGzFilePath,
            sync: true,
            strict: true,
        }, [EXECUTABLE]);
        return true;
    }
    catch (error) {
        console.error("An error occurred during tar.gz extraction: ".concat(error));
        return false;
    }
}
function deleteArchive(archiveFilePath) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, fs.promises.unlink(archiveFilePath)];
                case 1:
                    _a.sent();
                    return [2];
            }
        });
    });
}
function getAppArchiveFilename(version, platform, arch) {
    var compression = "zip";
    if (!SEMVER_REGEX.test(version)) {
        throw new Error("Unsupported version: ".concat(version));
    }
    switch (platform) {
        case "win32":
        case "windows":
            platform = "windows";
            break;
        case "linux":
            platform = "linux";
            compression = "tar.gz";
            break;
        case "darwin":
            platform = "macOS";
            break;
        default:
            throw new Error("Unsupported operating system: ".concat(platform));
    }
    switch (arch) {
        case "x64":
            arch = "amd64";
            break;
        case "arm64":
            arch = "arm64";
            break;
        default:
            throw new Error("Unsupported architecture: ".concat(arch));
    }
    if (platform === "macOS") {
        return "defang_".concat(version, "_").concat(platform, ".").concat(compression);
    }
    return "defang_".concat(version, "_").concat(platform, "_").concat(arch, ".").concat(compression);
}
function getPathToExecutable() {
    var extension = "";
    if (["win32", "cygwin"].includes(process.platform)) {
        extension = ".exe";
    }
    var executablePath = path.join(__dirname, "".concat(EXECUTABLE).concat(extension));
    try {
        return require.resolve(executablePath);
    }
    catch (e) {
        return null;
    }
}
function extractCLIVersions(versionInfo) {
    var versionRegex = /\d+\.\d+\.\d+/g;
    var matches = versionInfo.match(versionRegex);
    if (matches != null && matches.length >= 2) {
        return {
            defangCLI: matches[0],
            latestCLI: matches[1],
        };
    }
    else {
        throw new Error("Could not extract CLI versions from the output.");
    }
}
function getVersionInfo() {
    return __awaiter(this, void 0, void 0, function () {
        var result, execPath, latestVersion, versionInfo, verInfo, error_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    result = { current: null, latest: null };
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 5, , 6]);
                    execPath = getPathToExecutable();
                    if (!!execPath) return [3, 3];
                    return [4, getLatestVersion()];
                case 2:
                    latestVersion = _a.sent();
                    return [2, { current: null, latest: latestVersion }];
                case 3: return [4, exec(execPath + " version")];
                case 4:
                    versionInfo = _a.sent();
                    verInfo = extractCLIVersions(versionInfo.stdout);
                    result.current = verInfo.defangCLI;
                    result.latest = verInfo.latestCLI;
                    return [3, 6];
                case 5:
                    error_3 = _a.sent();
                    console.error(error_3);
                    return [3, 6];
                case 6: return [2, result];
            }
        });
    });
}
function extractCLIWrapperArgs(args) {
    var cliParams = {
        uselatest: true,
    };
    var outArgs = [];
    for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {
        var arg = args_1[_i];
        var argLower = arg.toLowerCase().replaceAll(" ", "");
        if (argLower.startsWith("--use-latest")) {
            var startOfValue = argLower.indexOf("=");
            if (startOfValue >= 0) {
                if (argLower.slice(startOfValue + 1) == "false") {
                    cliParams.uselatest = false;
                }
            }
        }
        else {
            outArgs.push(arg);
        }
    }
    return { cliParams: cliParams, outArgs: outArgs };
}
function getEndNameFromPath(pathLine) {
    var executableName = path.basename(pathLine);
    return executableName.split(".")[0];
}
function install(version, saveDirectory, os) {
    return __awaiter(this, void 0, void 0, function () {
        var filename, archiveFile, result, error_4;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 4, , 5]);
                    console.log("Getting latest defang cli");
                    filename = getAppArchiveFilename(version, os.platform, os.arch);
                    return [4, downloadAppArchive(filename, saveDirectory)];
                case 1:
                    archiveFile = _a.sent();
                    if (archiveFile == null || archiveFile.length === 0) {
                        throw new Error("Failed to download ".concat(filename));
                    }
                    return [4, extractArchive(archiveFile, saveDirectory)];
                case 2:
                    result = _a.sent();
                    if (result === false) {
                        throw new Error("Failed to install binaries!");
                    }
                    return [4, deleteArchive(archiveFile)];
                case 3:
                    _a.sent();
                    return [3, 5];
                case 4:
                    error_4 = _a.sent();
                    console.error(error_4);
                    throw error_4;
                case 5: return [2];
            }
        });
    });
}
function run() {
    return __awaiter(this, void 0, void 0, function () {
        var _a, cliParams, args, _b, current, latest, pathToExec, commandline, processResult, error_5;
        var _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _d.trys.push([0, 4, , 5]);
                    _a = extractCLIWrapperArgs(process.argv.slice(2)), cliParams = _a.cliParams, args = _a.outArgs;
                    if (!cliParams.uselatest) return [3, 3];
                    return [4, getVersionInfo()];
                case 1:
                    _b = _d.sent(), current = _b.current, latest = _b.latest;
                    if (!(latest != null && (current == null || current != latest))) return [3, 3];
                    return [4, install(latest, __dirname, {
                            platform: process.platform,
                            arch: process.arch,
                        })];
                case 2:
                    _d.sent();
                    _d.label = 3;
                case 3:
                    pathToExec = getPathToExecutable();
                    if (!pathToExec) {
                        throw new Error("Could not find the defang executable.");
                    }
                    commandline = ["npx", getEndNameFromPath(pathToExec)]
                        .join(" ")
                        .trim();
                    processResult = child_process.spawnSync(pathToExec, args, {
                        stdio: "inherit",
                        env: __assign(__assign({}, process.env), { DEFANG_COMMAND_EXECUTOR: commandline }),
                    });
                    processResult.error && console.error(processResult.error);
                    process.exitCode = (_c = processResult.status) !== null && _c !== void 0 ? _c : 1;
                    return [3, 5];
                case 4:
                    error_5 = _d.sent();
                    console.error(error_5);
                    process.exitCode = 2;
                    return [3, 5];
                case 5: return [2];
            }
        });
    });
}
var clilib = {
    deleteArchive: deleteArchive,
    downloadAppArchive: downloadAppArchive,
    downloadFile: downloadFile,
    extractArchive: extractArchive,
    extractCLIVersions: extractCLIVersions,
    extractCLIWrapperArgs: extractCLIWrapperArgs,
    getAppArchiveFilename: getAppArchiveFilename,
    getEndNameFromPath: getEndNameFromPath,
    getLatestVersion: getLatestVersion,
    getVersionInfo: getVersionInfo,
    getPathToExecutable: getPathToExecutable,
};
exports.default = clilib;
